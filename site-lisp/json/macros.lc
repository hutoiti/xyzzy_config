(require "json/package")
(lisp::in-package-1 :json)
(system:*fset 'with-gensyms '(macro (syms &body body) (block with-gensyms (list* 'let (mapcar #'(lambda (sym) (cons sym '((gensym)))) syms) body))))
(system:*putprop 'with-gensyms 'let 'lisp-indent-hook)
(system:*fset 'save-current-buffer '(macro (&body body) (block save-current-buffer (with-gensyms (original) (list 'let (list (cons original '((selected-buffer)))) (list 'with-set-buffer (list 'unwind-protect (cons 'progn body) (list 'unless (list 'deleted-buffer-p original) (list 'set-buffer original)))))))))
(system:*putprop 'save-current-buffer 'save-excursion 'lisp-indent-hook)
(system:*fset 'with-temporary-buffer '(macro ((name) &body body) (block with-temporary-buffer (with-gensyms (tmp) (list 'save-current-buffer (list 'let (list (list tmp (list 'get-buffer-create name))) (list 'unwind-protect (list* 'with-set-buffer (list 'set-buffer tmp) (list 'erase-buffer tmp) body) (list 'unless (list 'deleted-buffer-p tmp) (list 'delete-buffer tmp)))))))))
(system:*putprop 'with-temporary-buffer 'with-set-buffer 'lisp-indent-hook)
(system:*fset 'to-array '(macro (list) (block to-array (with-gensyms (glist) (list 'let (list (list glist list)) (list 'make-vector (list 'length glist) ':initial-contents glist))))))
(system:*fset 'to-hash '(macro (alist hash-table-test) (block to-hash (with-gensyms (galist) (list 'let (list (list galist alist)) (list* 'let (list (list 'r (list 'make-hash-table ':size (list 'length galist) ':test hash-table-test))) (list* 'dolist (list 'pair galist) '((setf (gethash (car pair) r) (cdr pair)))) '(r)))))))
(provide "json/macros")
